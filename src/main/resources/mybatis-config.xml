<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <!-- 方法一： 从外部指定properties配置文件, 除了使用resource属性指定外，还可通过url属性指定url
       <properties resource="dbConfig.properties"></properties>-->
    <!-- 方法二： 直接配置为xml -->
    <!--<properties>-->
        <!--<property name="driver" value="com.mysql.jdbc.Driver"/>-->
        <!--<property name="url" value="jdbc:mysql://localhost:3506/mybatis"/>-->
        <!--<property name="username" value="root"/>-->
        <!--<property name="password" value=""/>-->
    <!--</properties>-->

    <settings>
        <setting name="cacheEnabled" value="true"/>
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="true"/>
        <setting name="useGeneratedKeys" value="true"/>
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <setting name="defaultStatementTimeout" value="10"/>
    </settings>

    <typeAliases>
        <!--通过package, 可以直接指定package的名字， mybatis会自动扫描你指定包下面的javabean,
        并且默认设置一个别名，默认的名字为： javabean 的首字母小写的非限定类名来作为它的别名。
        也可在javabean 加上注解@Alias 来自定义别名， 例如： @Alias(user)
        <package name="com.mybatis.data"/>-->
        <typeAlias alias="UserEntity" type="com.mybatis.data.User"/>
    </typeAliases>

    <typeHandlers>
        <!--&lt;!&ndash;当配置package的时候，mybatis会去配置的package扫描TypeHandler-->
            <!--<package name="com.mybatis.handler"/>-->
        <!--&lt;!&ndash; handler属性直接配置我们要指定的TypeHandler &ndash;&gt;-->
        <typeHandler handler="com.mybatis.handler.StringTypeHandler"/>

        <!--&lt;!&ndash; javaType 配置java类型，例如String, 如果配上javaType, 那么指定的typeHandler就只作用于指定的类型 &ndash;&gt;-->
        <!--<typeHandler javaType="" handler=""/>-->

        <!--&lt;!&ndash; jdbcType 配置数据库基本数据类型，例如varchar, 如果配上jdbcType, 那么指定的typeHandler就只作用于指定的类型&ndash;&gt;-->
        <!--<typeHandler jdbcType="" handler=""/>-->

        <!--&lt;!&ndash; 也可两者都配置 &ndash;&gt;-->
        <!--<typeHandler javaType="" jdbcType="" handler=""/>-->

    </typeHandlers>

    <plugins>
        <plugin interceptor="com.github.pagehelper.PageInterceptor" />
    </plugins>

    <environments default="development">
        <environment id="development">
            <!--JDBC–这个配置直接简单使用了JDBC的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围。
            MANAGED–这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期
            （比如Spring或JEE应用服务器的上下文）。-->
            <transactionManager type="JDBC"/>
            <!--UNPOOLED–这个数据源的实现是每次被请求时简单打开和关闭连接
            POOLED–mybatis实现的简单的数据库连接池类型，它使得数据库连接可被复用，不必在每次请求时都去创建一个物理的连接。
            JNDI – 通过jndi从tomcat之类的容器里获取数据源。-->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://127.0.0.1:3506/mybatis"/>
                <property name="username" value="root"/>
                <property name="password" value=""/>
            </dataSource>
        </environment>
        <!-- 我再指定一个environment -->
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <!-- 与上面的url不一样 -->
                <property name="url" value="jdbc:mysql://localhost:3306/demo"/>
                <property name="username" value="root"/>
                <property name="password" value="root"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <!-- 第一种方式：通过resource指定 -->
        <mapper resource="mapper/UserMapper.xml"/>

        <!-- 第二种方式， 通过class指定接口，进而将接口与对应的xml文件形成映射关系
             不过，使用这种方式必须保证 接口与mapper文件同名(不区分大小写)，
             我这儿接口是UserDao,那么意味着mapper文件为UserDao.xml
        <mapper class="com.mybatis.dao.UserDao"/>
        -->
        <!-- 第三种方式，直接指定包，自动扫描，与方法二同理
        <package name="com.mybatis.dao"/>
        -->
        <!-- 第四种方式：通过url指定mapper文件位置
        <mapper url="file://........"/>
        -->
    </mappers>

</configuration>